---
import {getCollection} from 'astro:content';
import MainLayout from "../../layouts/MainLayout.astro";
import {type Recipe} from "../../loader/cooklang/schema";
export async function getStaticPaths() {
    const entries = await getCollection('recipe');
    return entries.map(entry => ({
        params: {slug: entry.id},
        props: {entry},
    }));
}
const {entry} = Astro.props;
const recipe = entry.data as Recipe
---
<MainLayout title={recipe.metadata.title}>
    <main class="max-w-3xl mx-auto px-4 py-8">
        <article>
            <h1 class="text-3xl font-bold mb-4">{recipe.metadata.title || "Untitled Recipe"}</h1>

            {recipe.metadata.description && (
                    <p class="text-gray-700 mb-6">{recipe.metadata.description}</p>
            )}

            <div class="flex flex-wrap gap-2 mb-6">
                {recipe.metadata.source && (
                        <div class="bg-gray-100 px-3 py-1 rounded">
                            <span class="font-semibold">Source:</span> <a
                                href={recipe.metadata.source}>{recipe.metadata.source}</a>
                        </div>
                )}
                {recipe.metadata.servings && (
                        <div class="bg-gray-100 px-3 py-1 rounded">
                            <span class="font-semibold">Servings:</span> {recipe.metadata.servings}
                        </div>
                )}
                {recipe.metadata.cookTime && (
                        <div class="bg-gray-100 px-3 py-1 rounded">
                            <span class="font-semibold">Cook Time:</span> {recipe.metadata.cookTime}
                        </div>
                )}
            </div>

            {recipe.metadata.notes && (
                    <div class="mb-6 bg-yellow-50 p-4 rounded border border-yellow-200">
                        <h2 class="not-prose text-lg font-bold mb-2">Notes</h2>
                        <p class="text-gray-800">{recipe.metadata.notes}</p>
                    </div>
            )}

            <hr class="border-t-2 mb-6"/>

            <div class="grid md:grid-cols-3 gap-8">
                <div class="md:col-span-1">
                    <h2 class="text-xl font-bold mb-4">Ingredients</h2>
                    <ul class="space-y-2">
                        {recipe.ingredients.map((ingredient) => (
                                <li class="flex items-start">
                                    <span class="font-medium whitespace-nowrap mr-2">{ingredient.quantity} {ingredient.units}</span>
                                    <span>{ingredient.name}</span>
                                </li>
                        ))}
                    </ul>
                </div>

                <div class="md:col-span-2">
                    <h2 class="text-xl font-bold mb-4">Instructions</h2>
                    <ol class="space-y-6">
                        {recipe.steps.map((step, index) => (
                                <li class="flex">
                                    <span class="font-bold mr-2">{index + 1}.</span>
                                    <div>
                                        {step.map((item) => {
                                            if (item.type === "text") {
                                                return <span>{item.value} </span>
                                            } else if (item.type === "ingredient") {
                                                return <span class="font-semibold text-green-700">{item.name} </span>
                                            } else if (item.type === "cookware") {
                                                return <span>{item.name} </span>
                                            } else if (item.type === "timer") {
                                                return <span
                                                        class="font-semibold text-red-700">{item.quantity} {item.units} {item.name && `(${item.name})`} </span>
                                            }
                                            return null;
                                        })}
                                    </div>
                                </li>
                        ))}
                    </ol>
                </div>
            </div>

            {Object.keys(recipe.shoppingList).length > 0 && (
                    <div class="mt-12">
                        <h2 class="text-xl font-bold mb-4">Shopping List</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            {Object.entries(recipe.shoppingList).map(([category, items]) => (
                                    <div class="bg-gray-50 p-4 rounded">
                                        <h3 class="font-bold mb-2">{category}</h3>
                                        <ul>
                                            {items.map((item) => (
                                                    <li>{item.name}{item.synonym && ` (${item.synonym})`}</li>
                                            ))}
                                        </ul>
                                    </div>
                            ))}
                        </div>
                    </div>
            )}
        </article>
    </main>
</MainLayout>
